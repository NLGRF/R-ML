getwd()
dir()
1+1
2-3
2*5
2/2
2**2
5%%2
log(100)
sqrt(9)
exp(5)
x<-100
y<-200
x+y
income2018 <- 50000
pct_increase <- 0.20
income2019 <- income2018 * (1 + pct_increase)
print(income2019)
x <- 100
print(x)
x <- 500 print(x)
x <- 500
print(x)
rm(x)
rm(list = ls())
scores <- c(80, 99, 90, 72, 55)
print(scores)
print(scores)
print(scores)
test
test.R
scores <- c(80, 99, 90, 72, 55)
print(scores)
# try this
scores + 10
scores * 2
updated <- c(5, 2, 3, 5, 7)
new_scores <- scores + updated
new_scores[1] # 85
new_scores[1:3] # 85 101 93
new_scores[3:5] # 93 77 62
getwd()
dir()
data("mtcars")
head(mtcars)
tail(mtcars)
dim(mtcars)
str(mtcars)
summary(mtcars)
head(mtcars)
install.packages("dplyr")
install.packages("ggplot2")
# R crash course
# create vectors
customer_name <- c("David", "Mary", "John", "Jack", "Daniel")
customer_age <- c(30, 32, 28, 20, 31)
customer_gender <- c("M", "F", "M", "M", "M")
customer_purchased <- c(TRUE, FALSE, FALSE, TRUE, TRUE)
# create a dataframe
customer_dataframe <- data.frame(customer_name,
customer_age,
customer_gender,
customer_purchased)
# first look at dataframe
print(customer_dataframe)
# useful functions to work with dataframe
str(customer_dataframe)
head(customer_dataframe)
tail(customer_dataframe)
summary(customer_dataframe)
install.packages("mlbench")
# install new package
install.packages("mlbench")
library(mlbench)
# load data into R
data(BreastCancer)
# review dataset
str(BreastCancer)
head(BreastCancer)
summary(BreastCancer)
# remove ID column
BreastCancer$Id <- NULL
# remove missing values
BreastCancer <- BreastCancer[complete.cases(BreastCancer),]
# prepare dataset
# split data into 70% train and 30% test sets
set.seed(123)
idx <- sample(nrow(BreastCancer), 0.7*nrow(BreastCancer))
train_df <- BreastCancer[idx, ]
test_df <- BreastCancer[-idx, ]
install.packages("rpart.plot")
# train a decision tree
set.seed(123)
dt_model <- rpart(Class ~ ., data = train_df, method = "class")
# install.packages("rpart")
# install.packages("rpart.plot")
library(rpart)
library(rpart.plot)
# install.packages("rpart")
# install.packages("rpart.plot")
library(rpart)
install.packages("rpart")
install.packages("rpart")
install.packages("rpart.plot")
library(rpart)
library(rpart.plot)
# train a decision tree
set.seed(123)
dt_model <- rpart(Class ~ ., data = train_df, method = "class")
# find the best cp hyperparameter
dt_model$cptable
# prune our model for higher accuracy
dt_model_final <- prune(dt_model, cp = 0.01000000)
# plot model
rpart.plot(dt_model_final)
# prediction
p <- predict(dt_model_final, newdata=test_df, type="class")
table(test_df$Class, p)
#             benign malignant
#             benign malignant
# benign       124         7
install.packages("randomForest")
library(randomForest)
# build random forest model
set.seed(123)
rf_model <- randomForest(Class ~ ., data = train_df)
# print model
print(rf_model)
# predict test data and compute accuracy
p <- predict(rf_model, newdata = test_df)
table(test_df$Class, p)
install.packages("rpart")
install.packages("rpart")
install.packages("rpart")
install.packages("rpart")
install.packages("rpart")
install.packages("rpart")
install.packages("rpart.plot")
library(rpart)
library(rpart.plot)
# train a decision tree
set.seed(123)
dt_model <- rpart(Class ~ ., data = train_df, method = "class")
# find the best cp hyperparameter
dt_model$cptable
# prune our model for higher accuracy
dt_model_final <- prune(dt_model, cp = 0.01000000)
# plot model
rpart.plot(dt_model_final)
# prediction
p <- predict(dt_model_final, newdata=test_df, type="class")
table(test_df$Class, p)
#             benign malignant
library(rpart.plot)
library(rpart)
library(rpart.plot)
# train a decision tree
set.seed(123)
dt_model <- rpart(Class ~ ., data = train_df, method = "class")
# find the best cp hyperparameter
dt_model$cptable
# prune our model for higher accuracy
dt_model_final <- prune(dt_model, cp = 0.01000000)
# plot model
rpart.plot(dt_model_final)
# prediction
p <- predict(dt_model_final, newdata=test_df, type="class")
table(test_df$Class, p)
#             benign malignant
#             benign malignant
# benign       124         7
#             benign malignant
# benign       124         7
# malignant      4        70
library(randomForest)
# build random forest model
set.seed(123)
rf_model <- randomForest(Class ~ ., data = train_df)
# print model
print(rf_model)
# predict test data and compute accuracy
p <- predict(rf_model, newdata = test_df)
table(test_df$Class, p)
library(rpart)
library(rpart.plot)
# train a decision tree
set.seed(123)
dt_model <- rpart(Class ~ ., data = train_df, method = "class")
# find the best cp hyperparameter
dt_model$cptable
# prune our model for higher accuracy
dt_model_final <- prune(dt_model, cp = 0.01000000)
# plot model
rpart.plot(dt_model_final)
# prediction
p <- predict(dt_model_final, newdata=test_df, type="class")
table(test_df$Class, p)
